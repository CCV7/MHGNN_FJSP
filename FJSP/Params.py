import argparse
import math
parser = argparse.ArgumentParser(description='sdac_FJSP')
parser.add_argument('--device', type=str, default="cuda", help='device')
parser.add_argument('--n_j', type=int, default=10, help='Number of jobs of instance')
parser.add_argument('--n_m', type=int, default=5, help='Number of machines instance')
parser.add_argument('--Reward_s', type=float, default=0., help='Reward scale')
parser.add_argument('--init_flag', type=bool, default=False, help='Flag of whether init state')
parser.add_argument('--low', type=int, default=0, help='Low of duration')
parser.add_argument('--upper', type=int, default=99, help='Upper of duration')
parser.add_argument('--nor_coef1', type=int, default=1000, help='Normalizing constant')
parser.add_argument('--num_layers', type=int, default=3, help='No. of layers of feature extraction GNN including input layer')
parser.add_argument('--nighbor_pooling_type', type=str, default='average', help='nighbour pooling type')
parser.add_argument('--Type', type=str, default='average', help='graph pooling type')
parser.add_argument('--op_input_dim', type=int, default=3, help='number of dimension of raw operation node features')
parser.add_argument('--mch_input_dim', type=int, default=2, help='number of dimension of raw machine node features')
parser.add_argument('--hidden_dim', type=int, default=128, help='hidden dim of MLP in fea extract GNN')
parser.add_argument('--num_mlp_layers_feature_extract', type=int, default=3, help='No. of layers of MLP in fea extract GNN')
parser.add_argument('--num_mlp_layers_actor', type=int, default=3, help='No. of layers in actor MLP')
parser.add_argument('--hidden_dim_actor', type=int, default=128, help='hidden dim of MLP in actor')
parser.add_argument('--num_mlp_layers_critic', type=int, default=2, help='No. of layers in critic MLP')
parser.add_argument('--Init', type=bool, default=True, help='No. of layers in critic MLP')
parser.add_argument('--hidden_dim_critic', type=int, default=32, help='hidden dim of MLP in critic')
parser.add_argument('--sdac_step', type=int, default=3, help='No. of envs for training')
parser.add_argument('--batch_size', type=int, default=16, help='No. of envs for training')
parser.add_argument('--num_ins', type=int, default=640, help='No. of envs for training')
parser.add_argument('--max_updates', type=int, default=300, help='No. of episodes of each env for training')
parser.add_argument('--lr', type=float, default=3e-4, help='lr')
parser.add_argument('--decayflag', type=bool, default=False, help='lr decayflag')
parser.add_argument('--decay_step_size', type=int, default=500, help='decay_step_size')
parser.add_argument('--decay_ratio', type=float, default=0.96, help='decay_ratio')
parser.add_argument('--gamma', type=float, default=1, help='discount factor')
parser.add_argument('--k_epochs', type=int, default=1, help='update policy for K epochs')
parser.add_argument('--softdate', type=float, default=0.01, help='softdate parameter for sdac')
parser.add_argument('--vloss_coef', type=float, default=1, help='critic loss coefficient')
parser.add_argument('--ploss_coef', type=float, default=2, help='policy loss coefficient')
parser.add_argument('--entloss_coef', type=float, default=math.log(2), help='entropy loss coefficient')
configs = parser.parse_args()
